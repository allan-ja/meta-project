name: Mark Stale Issues and PRs in Multiple Repos

on: [push]

jobs:
  mark-stale-items:
    runs-on: ubuntu-latest
    steps:
    - name: Mark Stale Issues and PRs
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.META_PROJECT_SERVICE_PAT }}
        script: |
          const DAYS_FOR_STALE_PR = 30;
          const MONTHS_FOR_STALE_BRANCH = 6;
          const DRY_RUN = true; // Set to false to perform actual closing/deletion

          // Function to calculate past date
          function getPastDate(days = 0, months = 0) {
            const date = new Date();
            date.setDate(date.getDate() - days);
            date.setMonth(date.getMonth() - months);
            return date.toISOString();
          }

          const stalePRDate = getPastDate(DAYS_FOR_STALE_PR);
          const staleBranchDate = getPastDate(0, MONTHS_FOR_STALE_BRANCH);

          const repo = "realestate-scrapper";
          const owner = context.repo.owner;

          // Close stale PRs
          const stalePRs = await github.rest.search.issuesAndPullRequests({
            q: `repo:${owner}/${repo} is:pr is:open updated:<${stalePRDate}`
          });

          for (const pr of stalePRs.data.items) {
            console.log(`Stale PR found: #${pr.number} - ${pr.title}`);

            
          }

          // Delete stale branches without associated PR
          const branches = await github.rest.repos.listBranches({
            owner: owner,
            repo: repo
          });

          for (const branch of branches.data) {
            if (branch.name === 'main' || branch.name === 'master') continue; // Skip main and master branches

            const lastCommit = await github.rest.repos.getCommit({
              owner: owner,
              repo: repo,
              ref: branch.name
            });

            if (new Date(lastCommit.data.commit.committer.date) < new Date(staleBranchDate)) {
              console.log(`Stale branch found: ${branch.name}`);

              if (DRY_RUN) {
                // Check if branch is not protected
                const isProtected = await github.rest.repos.getBranchProtection({
                  owner: owner,
                  repo: repo,
                  branch: branch.name
                }).then(() => true).catch(() => false);

                if (!isProtected) {
                  console.log(`Stale branch to be delete on ${repo}: ${branch.name}`)
                }
              }
            }
          }
